C N -> C

0 0 -> 0 # Barren
0 1 -> 0 # Barren
0 2 -> 0 # Barren
0 3 -> 1 # It takes three to give birth!
0 4 -> 0 # Barren
0 5 -> 0 # Barren
0 6 -> 0 # Barren
0 7 -> 0 # Barren
0 8 -> 0 # Barren
1 0 -> 0 # Lonely
1 1 -> 0 # Lonely
1 2 -> 1 # Lives
1 3 -> 1 # Lives
1 4 -> 0 # Overcrowded
1 5 -> 0 # Overcrowded
1 6 -> 0 # Overcrowded
1 7 -> 0 # Overcrowded
1 8 -> 0 # Overcrowded

a bcde

000001000

0 0000 -> 0
0 0001 -> 0
0 0010 -> 0
0 0011 -> 1
0 0100 -> 0
0 0101 -> 0
0 0110 -> 0
0 0111 -> 0
0 1000 -> 0

000001100

1 0000 -> 0
1 0001 -> 0
1 0010 -> 1
1 0011 -> 1
1 0100 -> 0
1 0101 -> 0
1 0110 -> 0
1 0111 -> 0
1 1000 -> 0

a = [0|1]
n = [0..8]
a | n == 3


0000 -> 0
0001 -> 0
0010 -> 0
0011 -> 1
0100 -> 0
0101 -> 0
0110 -> 0
0111 -> 0
1000 -> 0

0001 -> 0
0001 -> 0
0011 -> 1
0011 -> 1
0101 -> 0
0101 -> 0
0111 -> 0
0111 -> 0
1001 -> 0

abc
d f
ghi

int BitCount(unsigned int u)                         
{
         unsigned int uCount;
    
         uCount = u - ((u >> 1) & 033333333333) - ((u >> 2) & 011111111111);
         return ((uCount + (uCount >> 3)) & 030707070707) % 63;
}

: nextGen ( cell neighbours -- cell ) 
  or 3 =
;

: bitcount ( x -- n )
  dup dup
  1 rshift $b6db and swap
  2 rshift $9249 and + -
  dup
  3 rshift $71c7 and +
  15 u/mod drop
;

1111111111111111 1111111111111111
1100011100011100 0111000111000111 030707070707 // 0x71c7 ( 070707)

 1111111111111111
11011011011011011 0333333
 1011011011011011 0333333 // 0xb6db
  011011011011011 033333
 0111111111111111

 1001001001001001 0111111 // 0x9249
  001001001001001 011111
 0011111111111111

